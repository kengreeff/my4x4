// Config
// -------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
// -------

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Attribute {
  id    String @id @default(uuid())
  key   String @unique
  title String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projectsAttributes ProjectsAttribute[]

  @@map("attributes")
}

model Image {
  id               String  @id @default(uuid())
  fileKey          String  @map("file_key")
  filename         String
  originalFilename String  @map("original_filename")
  user             User?   @relation(fields: [userId], references: [id])
  userId           String? @map("user_id")
  title            String?
  description      String? @db.Text()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projectsImages ProjectsImage[]

  @@map("images")
}

model Manufacturer {
  id                 String            @id @default(uuid())
  key                String            @unique
  title              String
  manufacturerType   ManufacturerType? @relation(fields: [manufacturerTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  manufacturerTypeId String?           @map("manufacturer_type_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  manufacturerModels ManufacturerModel[]
  manufacturerParts  ManufacturerPart[]

  @@map("manufacturers")
}

model ManufacturerModel {
  id             String       @id @default(uuid())
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  manufacturerId String       @map("manufacturer_id")
  key            String       @unique
  title          String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projects Project[]

  @@map("manufacturer_models")
}

model ManufacturerPart {
  id             String       @id @default(uuid())
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  manufacturerId String       @map("manufacturer_id")
  title          String
  partNumber     String?      @map("part_number")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projectsParts ProjectsPart[]

  @@map("manufacturer_parts")
}

model ManufacturerType {
  id    String @id @default(uuid())
  key   String @unique
  title String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  manufacturers Manufacturer[]

  @@map("manufacturer_types")
}

model Project {
  id              String  @id @default(uuid())
  title           String
  slug            String  @unique
  description     String?
  published       Boolean @default(false)
  temporaryUserId String? @map("temporary_user_id")

  manufacturerModel   ManufacturerModel @relation(fields: [manufacturerModelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  manufacturerModelId String            @map("manufacturer_model_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projectsAttributes ProjectsAttribute[]
  projectsImages     ProjectsImage[]
  projectsUsers      ProjectsUser[]
  projectsParts      ProjectsPart[]

  @@map("projects")
}

model ProjectsAttribute {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId   String    @map("project_id")
  attribute   Attribute @relation(fields: [attributeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attributeId String    @map("attribute_id")
  value       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, attributeId])
  @@map("projects_attributes")
}

model ProjectsImage {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String  @map("project_id")
  image     Image   @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId   String  @map("image_id")
  sort      Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, imageId])
  @@map("projects_images")
}

model ProjectsPart {
  id                 String           @id @default(uuid())
  manufacturerPart   ManufacturerPart @relation(fields: [manufacturerPartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  manufacturerPartId String           @map("manufacturer_part_id")
  project            Project          @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId          String           @map("project_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, manufacturerPartId])
  @@map("projects_manufacturer_parts")
}

model ProjectsUser {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String  @map("project_id")
  user      User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String  @map("user_id")
  sort      Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, userId])
  @@map("projects_users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  images        Image[]
  projectsUsers ProjectsUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
