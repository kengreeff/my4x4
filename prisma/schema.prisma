// Config
// -------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
// -------

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Image {
  id               String  @id @default(uuid())
  fileKey          String  @map("file_key")
  filename         String
  originalFilename String  @map("original_filename")
  user             User?   @relation(fields: [userId], references: [id])
  userId           String? @map("user_id")
  title            String?
  description      String? @db.Text()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  projectImages ProjectsImage[]

  @@map("images")
}

model Project {
  id    String @id @default(uuid())
  title String
  slug  String @unique

  projectImages ProjectsImage[]
  projectUsers  ProjectsUser[]

  @@map("projects")
}

model ProjectsImage {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String  @map("project_id")
  image     Image   @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId   String  @map("image_id")
  sort      Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, imageId])
  @@map("projects_images")
}

model ProjectsUser {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String  @map("project_id")
  user      User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String  @map("user_id")
  sort      Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([projectId, userId])
  @@map("projects_users")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts     Account[]
  sessions     Session[]
  images       Image[]
  projectUsers ProjectsUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
